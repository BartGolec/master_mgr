package com.mgr.bg.Controller;

import com.mgr.bg.Model.BatchDataEntity;
import com.mgr.bg.Model.SingleDataEntity;
import com.mgr.bg.Repository.BatchDataRepository;
import com.mgr.bg.Repository.SingleDataRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * Created by Bartosz on 11/24/2018.
 */

@Controller    // This means that this class is a Controller
@RequestMapping(path="/data") // This means URL's start with /demo (after Application path)
public class UrlEntityController {

    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private SingleDataRepository singleDataRepository;
    //localhost:8080/data/add?date=01-01-2019&Pmax=20&BOO=2&BOP=4&BPO=6&BPP=19&CO=203&CP=23

    @Autowired
    private BatchDataRepository batchDataRepository;

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody
    String addNewUser (@RequestParam(value = "date", required = false, defaultValue = "") String date,
                       @RequestParam(value = "Pmax", required = false, defaultValue = "") double Pmax,
                       @RequestParam(value = "BOO", required = false, defaultValue = "") double  BOO,
                       @RequestParam(value = "BOP", required = false, defaultValue = "") double BOP,
                       @RequestParam(value = "BPO", required = false, defaultValue = "") double BPO,
                       @RequestParam(value = "BPP", required = false, defaultValue = "") double BPP,
                       @RequestParam(value = "CO", required = false, defaultValue = "") double CO,
                       @RequestParam (value = "CP", required = false, defaultValue = "")double CP){
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        SingleDataEntity singleDataEntity = new SingleDataEntity();
        singleDataEntity.setDate(date);
        singleDataEntity.setPmax(Pmax);
        singleDataEntity.setBOO(BOO);
        singleDataEntity.setBOP(BOP);
        singleDataEntity.setBPO(BPO);
        singleDataEntity.setBPP(BPP);
        singleDataEntity.setCO(CO);
        singleDataEntity.setCP(CP);
        singleDataRepository.save(singleDataEntity);

        return "Saved : " + singleDataRepository.findById(singleDataEntity.getId());
    }

    @PostMapping(value = "/retrieveDataFromCertainNode")
    public String submitDataFromCertainNode(@ModelAttribute("batchDataEntity") BatchDataEntity batchDataEntity,
                                            BindingResult result, ModelMap model) {
        if (result.hasErrors()) {
            return "wrongDataInputError";
        }

        model.addAttribute("fileName", batchDataEntity.getFileName());

        List<BatchDataEntity> batchDataEntityList = batchDataRepository.findByFileName(batchDataEntity.getFileName());
        model.addAttribute("batchDataList", batchDataEntityList);

        return "retrieveDataFromCertainNodeView";
    }

    //localhost:8080/demo/all
    @GetMapping(path="/all")
    public String  getAllEntities(@ModelAttribute("batchDataEntity") BatchDataEntity batchDataEntity, BindingResult result, ModelMap model) {
        if(result.hasErrors()){
            return "wrongDataInputError";
        }

        List<BatchDataEntity> batchDataEntityList = batchDataRepository.findAll();
        model.addAttribute("allBatchDataList", batchDataEntityList);

        return "retrieveAllData";
    }
}
